!function(t,e){for(var r in e)t[r]=e[r]}(window,function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);const i=function(t,e,r){if(this.gl=t,!e||!e[0]||!e[1])throw"Failed to initalize viewport dimension";this._viewportDimension=e,this.spriteLimit=r||1e4,this._spriteCount=0,this.updateRegistry=[],this._init()};i.prototype={_init:function(){let t=this.gl,e=t.createShader(t.VERTEX_SHADER);t.shaderSource(e,"#version 300 es\n\n        // an attribute is an input (in) to a vertex shader.\n        // It will receive data from a buffer\n        in vec2 a_position;\n        in vec4 a_color;\n        out vec4 v_color;\n\n        // Used to pass in the resolution of the canvas\n        uniform vec2 u_resolution;\n        \n        // all shaders have a main function\n        void main() {\n        \n          // convert the position from pixels to 0.0 to 1.0\n          vec2 zeroToOne = a_position / u_resolution;\n        \n          // convert from 0->1 to 0->2\n          vec2 zeroToTwo = zeroToOne * 2.0;\n        \n          // convert from 0->2 to -1->+1 (clipspace)\n          vec2 clipSpace = zeroToTwo - 1.0;\n        \n          v_color = a_color;\n          gl_Position = vec4(clipSpace, 0, 1);\n        }\n        "),t.compileShader(e);let r=t.getShaderParameter(e,t.COMPILE_STATUS);if(!r){throw"V Shader failed to compile with error: "+t.getShaderInfoLog(e)}let i=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(i,"#version 300 es\n        \n        precision mediump float;\n\n        in vec4 v_color;\n        \n        // we need to declare an output for the fragment shader\n        out vec4 outColor;\n        \n        void main() {\n          outColor = v_color;\n        }\n        "),t.compileShader(i),!(r=t.getShaderParameter(i,t.COMPILE_STATUS)))throw lastError=t.getShaderInfoLog(i),"F Shader failed to compile with error: "+lastError;let n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,i),t.linkProgram(n),!t.getProgramParameter(n,t.LINK_STATUS))throw lastError=t.getProgramInfoLog(n),"Program linking failed: "+lastError;let o=t.getAttribLocation(n,"a_position"),a=t.getUniformLocation(n,"u_resolution"),s=t.getAttribLocation(n,"a_color"),u=t.createVertexArray();t.bindVertexArray(u),t.enableVertexAttribArray(o),t.enableVertexAttribArray(s);let c=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,c);let f=new Float32Array(12*this.spriteLimit);t.bufferData(t.ARRAY_BUFFER,f,t.STREAM_DRAW);let l=2,p=t.FLOAT,h=!1,d=0,m=0;t.vertexAttribPointer(o,l,p,h,d,m),this.positionTypeArray=f,this.positionBuffer=c;let _=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,_);let A=new Float32Array(24*this.spriteLimit);t.bufferData(t.ARRAY_BUFFER,A,t.STREAM_DRAW),l=4,p=t.FLOAT,h=!1,d=0,m=0,t.vertexAttribPointer(s,l,p,h,d,m),this.colorTypeArray=A,this.colorBuffer=_,t.useProgram(n),t.uniform2f(a,t.canvas.width,t.canvas.height)},start:function(){let t=e=>{this._render(),this._update(.001*e),window.requestAnimationFrame(t)};return window.requestAnimationFrame(t)},stop:function(){},registerSprite:function(t,e){let r=this._spriteCount;this._spriteCount++,this.positionTypeArray.set([t[0],t[1],t[2],t[1],t[0],t[3],t[0],t[3],t[2],t[1],t[2],t[3]],12*r);let i=e;return this.colorTypeArray.set([i[0],i[1],i[2],i[3],i[0],i[1],i[2],i[3],i[0],i[1],i[2],i[3],i[0],i[1],i[2],i[3],i[0],i[1],i[2],i[3],i[0],i[1],i[2],i[3]],24*r),r},updateSprite:function(t,e,r){if("number"!=typeof t)throw"sprite index must be provided";if(e){let r=e;this.positionTypeArray.set([r[0],r[1],r[2],r[1],r[0],r[3],r[0],r[3],r[2],r[1],r[2],r[3]],12*t)}return t},_render:function(){let t=this.gl;t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer),t.bufferSubData(t.ARRAY_BUFFER,0,this.positionTypeArray),t.bindBuffer(t.ARRAY_BUFFER,this.colorBuffer),t.bufferSubData(t.ARRAY_BUFFER,0,this.colorTypeArray),t.viewport(0,0,this._viewportDimension[0],this._viewportDimension[1]),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT);let e=t.TRIANGLES,r=6*this.spriteLimit;t.drawArrays(e,0,r)},_update:function(t){this.updateRegistry.forEach(e=>{try{e(t)}catch(t){console.error("Failed to cast update with error: "+t)}})},registerUpdate:function(t){if("function"!=typeof t)throw"Callback argument must be a function";return this.updateRegistry.push(t)},unregisterUpdate:function(t){return this.updateRegistry.splice(t,1)}};let n={runtime:null};const o=function(t,e,r){this.topLeft=t,this.dimension=e,this.color=r,this._register()};o.prototype={_register:function(){this._runtimeIndex=n.runtime.registerSprite([...this.topLeft,this.topLeft[0]+this.dimension[0],this.topLeft[1]+this.dimension[1]],this.color)},animate:function(t,e,r,i,o){t&&n.runtime.registerUpdate(e=>{this.topLeft[0]+=e*t,n.runtime.updateSprite(this._runtimeIndex,[...this.topLeft,this.topLeft[0]+this.dimension[0],this.topLeft[1]+this.dimension[1]],this.color)})}},r.d(e,"twod",function(){return s});const a=function(t,e,r){if(!t)throw"Missing argument. ";this.viewportDimension=e,this.canvasElement=t;try{this.gl=this.canvasElement.getContext("webgl2"),n.runtime=new i(this.gl,this.viewportDimension,r)}catch(t){throw"Failed to initalize webgl2 with error: "+t}};a.prototype={start:function(){return n.runtime.start()},stop:function(){return n.runtime.stop()},createSprite:function(t,e,r){return new o(t,e,r)}};const s=function(t,e,r){return new a(t,e,r)}}]));